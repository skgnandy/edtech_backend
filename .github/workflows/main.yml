name: Deploy Strapi to EC2
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm test || echo "No tests defined, skipping..." 
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
          
      - name: Generate deployment package
        run: |
          mkdir -p deployment
          # Include database directory and src directory
          cp -r build config database public src package.json package-lock.json .env.example deployment/
          cd deployment && tar -czf ../deployment.tar.gz .
          
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 13.126.228.103 >> ~/.ssh/known_hosts
          
      - name: Deploy to EC2
        run: |
          scp deployment.tar.gz ubuntu@13.126.228.103:~/deployment.tar.gz
          ssh ubuntu@13.126.228.103 << 'EOF'
            # Stop the current Strapi application
            cd ~/edtech_backend
            pm2 stop strapi || true
            
            # Backup the current version
            timestamp=$(date +%Y%m%d%H%M%S)
            mkdir -p ~/backups
            tar -czf ~/backups/edtech_backend-backup-$timestamp.tar.gz ~/edtech_backend --exclude=node_modules
            
            # Backup important files
            cp ~/edtech_backend/.env ~/edtech_env_backup
            # Also backup database config if it exists separately
            if [ -d ~/edtech_backend/config/database ]; then
              mkdir -p ~/database_config_backup
              cp -r ~/edtech_backend/config/database ~/database_config_backup
            fi
            
            # Create a temporary directory for extraction
            mkdir -p ~/edtech_temp
            tar -xzf ~/deployment.tar.gz -C ~/edtech_temp
            
            # Clear the current build files but preserve specific directories
            rm -rf ~/edtech_backend/build ~/edtech_backend/config ~/edtech_backend/public
            
            # Copy new files
            cp -r ~/edtech_temp/* ~/edtech_backend/
            
            # Restore the .env file
            cp ~/edtech_env_backup ~/edtech_backend/.env
            
            # Restore database config if it was backed up
            if [ -d ~/database_config_backup ]; then
              mkdir -p ~/edtech_backend/config/
              cp -r ~/database_config_backup/* ~/edtech_backend/config/database/
            fi
            
            # Install production dependencies
            cd ~/edtech_backend
            npm install --production
            
            # Restart Strapi with PM2
            pm2 restart strapi || pm2 start npm --name "strapi" -- run start
            
            # Show logs to help with debugging
            echo "Showing Strapi logs for debugging:"
            sleep 10
            pm2 logs strapi --lines 20 --nostream
            
            # Clean up
            rm ~/deployment.tar.gz
            rm ~/edtech_env_backup
            rm -rf ~/database_config_backup
            rm -rf ~/edtech_temp
            
            # Validate deployment
            echo "Deployment completed. Checking Strapi status..."
            pm2 status
          EOF
          
      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 60
          curl -v https://api.explored.co.in || (echo "Deployment verification failed" && exit 1)
          echo "Deployment verified successfully!"
