name: Deploy Strapi to EC2
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm test || echo "No tests defined, skipping..." 
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Generate deployment package
        run: |
          mkdir -p deployment
          # Include only necessary files for production
          cp -r build config database public src package.json package-lock.json .env.example deployment/
          cd deployment && tar -czf ../deployment.tar.gz .
          # Check size of deployment package
          ls -lh ../deployment.tar.gz
          
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 3.109.154.254 >> ~/.ssh/known_hosts
          
      - name: Check and clean EC2 disk space
        run: |
          # Check disk space before attempting any transfers
          echo "Checking disk space on EC2 instance..."
          ssh ubuntu@3.109.154.254 "df -h"
          
          # Clean up old deployments, logs, and temporary files to free up space
          echo "Cleaning up disk space on EC2 instance..."
          ssh ubuntu@3.109.154.254 << 'EOF'
            # Remove old deployment packages
            rm -f ~/deployment.tar.gz
            
            # Clean up old backup files (keep only the 3 most recent)
            if [ -d ~/backups ]; then
              cd ~/backups
              ls -t | tail -n +4 | xargs rm -f
            fi
            
            # Clean up PM2 logs
            pm2 flush || true
            
            # Clean up temp directories
            rm -rf ~/edtech_temp ~/database_config_backup
            
            # Remove npm cache
            npm cache clean --force || true
            
            # Remove any old node_modules if present (will be reinstalled)
            if [ -d ~/edtech_backend/node_modules ]; then
              rm -rf ~/edtech_backend/node_modules
            fi
            
            # Check disk space after cleanup
            df -h
          EOF
          
      - name: Deploy to EC2 using rsync
        run: |
          # Create a smaller deployment package by excluding unnecessary files
          echo "Creating optimized deployment package..."
          
          # Instead of using SCP, use rsync which can handle network issues better
          echo "Starting rsync transfer..."
          rsync -avz --stats --progress --exclude "node_modules" deployment/ ubuntu@3.109.154.254:~/edtech_temp/ || {
            echo "rsync failed, trying direct extraction method..."
            # If rsync fails, try a smaller approach by uploading just the essential files
            ssh ubuntu@3.109.154.254 "mkdir -p ~/edtech_temp"
            scp package.json package-lock.json ubuntu@3.109.154.254:~/edtech_temp/
            scp .env.example ubuntu@3.109.154.254:~/edtech_temp/
            
            # Create essential directories
            ssh ubuntu@3.109.154.254 "mkdir -p ~/edtech_temp/config ~/edtech_temp/src"
            
            # Transfer essential directories individually
            for dir in build config database public src; do
              if [ -d "$dir" ]; then
                echo "Transferring $dir directory..."
                rsync -az --stats $dir/ ubuntu@3.109.154.254:~/edtech_temp/$dir/ || {
                  echo "Failed to transfer $dir, but continuing with deployment..."
                }
              fi
            done
          }
          
      - name: Deploy on EC2
        run: |
          ssh ubuntu@3.109.154.254 << 'EOF'
            # Check if any files were transferred
            if [ ! -d ~/edtech_temp ] || [ -z "$(ls -A ~/edtech_temp)" ]; then
              echo "ERROR: No files were transferred. Deployment failed."
              exit 1
            fi
            
            # Stop the current Strapi application
            cd ~/edtech_backend || mkdir -p ~/edtech_backend
            pm2 stop strapi || true
            
            # Backup only essential configuration files
            echo "Backing up essential configuration files..."
            mkdir -p ~/backup_config
            if [ -f ~/edtech_backend/.env ]; then
              cp ~/edtech_backend/.env ~/backup_config/
            fi
            
            if [ -d ~/edtech_backend/config/database ]; then
              mkdir -p ~/backup_config/database
              cp -r ~/edtech_backend/config/database/* ~/backup_config/database/
            fi
            
            # Clear only specific directories to preserve data
            rm -rf ~/edtech_backend/build ~/edtech_backend/config ~/edtech_backend/public
            
            # Copy new files
            cp -r ~/edtech_temp/* ~/edtech_backend/
            
            # Restore configuration files
            if [ -f ~/backup_config/.env ]; then
              cp ~/backup_config/.env ~/edtech_backend/.env
            else
              # If no .env backup, copy example
              if [ -f ~/edtech_backend/.env.example ]; then
                cp ~/edtech_backend/.env.example ~/edtech_backend/.env
                echo "WARNING: Using .env.example as .env. Please update with correct values."
              fi
            fi
            
            if [ -d ~/backup_config/database ]; then
              mkdir -p ~/edtech_backend/config/database
              cp -r ~/backup_config/database/* ~/edtech_backend/config/database/
            fi
            
            # Install production dependencies
            cd ~/edtech_backend
            echo "Installing production dependencies..."
            npm install --production --no-audit --no-fund --prefer-offline
            
            # Restart Strapi with PM2
            echo "Starting Strapi application..."
            pm2 restart strapi || pm2 start npm --name "strapi" -- run start
            
            # Show logs to help with debugging
            echo "Showing Strapi logs for debugging:"
            sleep 10
            pm2 logs strapi --lines 20 --nostream
            
            # Clean up
            rm -rf ~/edtech_temp ~/backup_config
            
            # Validate deployment
            echo "Deployment completed. Checking Strapi status..."
            pm2 status
          EOF
          
      - name: Verify deployment
        run: |
          echo "Waiting for application to start..."
          sleep 60
          curl -v --max-time 30 https://api.explored.co.in || echo "Warning: Verification check failed, but deployment might still be successful"
          echo "Deployment process completed!"
